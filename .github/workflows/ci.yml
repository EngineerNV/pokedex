name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
      - name: Install Compatible ChromeDriver
        run: |
          set -e  # Exit on error

          # Ensure jq is installed
          # sudo apt-get install -y jq # jq is not used in this simplified script

          # Fetch installed Chrome version
          CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+\.\d+' | head -1)
          echo "Detected Chrome version: $CHROME_VERSION"
          # CHROME_MAJOR_VERSION=$(echo "$CHROME_VERSION" | cut -d '.' -f 1) # Not used in this version

          # Attempt to download ChromeDriver using the full Chrome version in the URL
          DRIVER_URL="https://chromedriver.storage.googleapis.com/${CHROME_VERSION}/chromedriver_linux64.zip"

          echo "Attempting to download ChromeDriver from: $DRIVER_URL"
          wget -q "$DRIVER_URL" -O chromedriver_linux64.zip || {
            echo "Failed to download ChromeDriver with full version: $CHROME_VERSION. Falling back to LATEST_RELEASE."
            # Fallback to LATEST_RELEASE
            LATEST_DRIVER_VERSION=$(curl -sS "https://chromedriver.storage.googleapis.com/LATEST_RELEASE" || echo "")

            if [ -z "$LATEST_DRIVER_VERSION" ]; then
              echo "Failed to fetch LATEST_RELEASE version for ChromeDriver."
              exit 1
            fi

            DRIVER_URL="https://chromedriver.storage.googleapis.com/${LATEST_DRIVER_VERSION}/chromedriver_linux64.zip"
            echo "Attempting to download ChromeDriver from fallback URL: $DRIVER_URL"
            wget -q "$DRIVER_URL" -O chromedriver_linux64.zip
          }

          # Validate that the download was successful (wget exits 0 on success)
          if [ $? -ne 0 ]; then
            echo "Failed to download ChromeDriver even after fallback."
            # Check if the downloaded file is an XML error page (common for GCS errors)
            if [ -f chromedriver_linux64.zip ] && grep -q "<Error>" chromedriver_linux64.zip && grep -q "<Code>NoSuchKey</Code>" chromedriver_linux64.zip; then
              echo "Error: The downloaded file appears to be a 'NoSuchKey' error from Google Cloud Storage."
              echo "This means the specific ChromeDriver version might not exist at the attempted URLs."
            elif [ -f chromedriver_linux64.zip ]; then
              echo "Downloaded content (first 200 bytes) that might indicate an issue:"
              head -c 200 chromedriver_linux64.zip
              echo "" # Newline for clarity
            fi
            rm -f chromedriver_linux64.zip # Clean up partial/error download
            exit 1
          fi

          unzip -o chromedriver_linux64.zip -d /usr/local/bin/
          if [ $? -ne 0 ]; then
            echo "Failed to unzip ChromeDriver."
            exit 1
          fi
          rm chromedriver_linux64.zip
          echo "ChromeDriver installation completed successfully."
      - name: Check Chrome Version
        run: google-chrome --version
      - name: Check ChromeDriver Version
        run: chromedriver --version
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage
      - name: Run tests
        run: make test
      - name: Run coverage
        run: make coverage
